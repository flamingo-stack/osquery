name: OSQuery Build and Push Latest

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  push:
    branches: [master, feature/agent-ci]
    paths-ignore:
      - "**/*.md"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.2.3)"
        required: true
        type: string

env:
  REGISTRY: "ghcr.io"
  ORGANISATION: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}
  CMAKE_OSX_DEPLOYMENT_TARGET: "15.0"
  CMAKE_BUILD_TYPE: Release

# =============================================================================
# JOBS
# =============================================================================

jobs:
  build_macos:
    name: "Build C Client (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "macOS x86-64"
            os: macos-13
            os_arch: x86-64
            cmake_arch: x86_64
            artifact_name: osquery-macos-x64
          - name: "macOS ARM64"
            os: macos-latest
            os_arch: arm64
            cmake_arch: arm64
            artifact_name: osquery-macos-arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Xcode Command Line Tools
        shell: bash
        run: |
          # Install Xcode if not already installed
          if ! xcode-select -p >/dev/null 2>&1; then
            echo "Installing Xcode Command Line Tools..."
            xcode-select --install
            # Wait for installation to complete
            while ! xcode-select -p >/dev/null 2>&1; do
              echo "Waiting for Xcode Command Line Tools installation..."
              sleep 10
            done
          fi

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
            /opt/homebrew
          key: ${{ runner.os }}-${{ runner.arch }}-homebrew-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-homebrew-

      - name: Install macOS Dependencies
        run: brew install ccache git git-lfs cmake python clang-format flex bison cppcheck
        shell: bash
      
      - name: Setup ccache
        run: |
          echo "Setting up ccache..."
          ccache --version
          ccache --zero-stats
          ccache --show-stats
          
          # Configure ccache
          ccache --set-config max_size=2G
          ccache --set-config compression=true

      - name: Cache CMake Build for faster rebuilds
        uses: actions/cache@v4
        with:
          path: |
            build/
            ~/.ccache
          key: ${{ runner.os }}-${{ matrix.os_arch }}-cmake-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os_arch }}-cmake-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt') }}
            ${{ runner.os }}-${{ matrix.os_arch }}-cmake-

      - name: Setup Build Environment
        run: |
          echo "Setting up build environment for ${{ matrix.os_arch }}..."
          export SDKROOT=$(xcrun --show-sdk-path)
          export CFLAGS="-isysroot $SDKROOT"
          export CXXFLAGS="-isysroot $SDKROOT"
          
          echo "SDKROOT=$SDKROOT" >> $GITHUB_ENV
          echo "CFLAGS=-isysroot $SDKROOT" >> $GITHUB_ENV
          echo "CXXFLAGS=-isysroot $SDKROOT" >> $GITHUB_ENV
          
      - name: Configure CMake
        run: |
          echo "Creating build directory and configuring..."
          mkdir -p build && cd build
          
          cmake \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.CMAKE_OSX_DEPLOYMENT_TARGET }} \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_OSX_SYSROOT=$SDKROOT \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.cmake_arch }} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ..
            
          echo "CMake configuration completed"

      # Build the project
      - name: Build Project
        run: |
          echo "Starting build for ${{ matrix.os_arch }}..."
          cd build
          
          CPU_COUNT=$(sysctl -n hw.ncpu)
          echo "Building with $CPU_COUNT parallel jobs"
          time cmake --build . -j $CPU_COUNT
          
          echo "Build completed successfully"

#      - name: Build OSQuery for macOS ${{ matrix.os_arch }}
#        run: |
#          echo "Building OSQuery for macOS ${{ matrix.os_arch }}"
#          make macos ARCHID=${{ matrix.archid }}

      - name: Prepare Artifacts
        run: |
          mkdir -p artifacts
          cp build/osquery/osqueryd "artifacts/${{ matrix.artifact_name }}"

      - name: Upload client artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            artifacts/
          if-no-files-found: warn
          retention-days: 30
          compression-level: 9

  create_universal_macos:
    name: "Create Universal macOS Binary"
    needs: [build_macos]
    runs-on: macos-latest
    if: |
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
      !failure() && !cancelled()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download macOS x86-64 Binary
        uses: actions/download-artifact@v4
        with:
          name: osquery-macos-x64
          path: x64-artifacts/

      - name: Download macOS ARM64 Binary
        uses: actions/download-artifact@v4
        with:
          name: osquery-macos-arm64
          path: arm64-artifacts/

      - name: Create Universal Binary
        run: |
          echo "Creating universal macOS binary..."
          X64_BINARY="x64-artifacts/osquery-macos-x64"
          ARM64_BINARY="arm64-artifacts/osquery-macos-arm64"
          
          echo "Creating universal binary with lipo..."
          mkdir -p artifacts
          lipo -create "$X64_BINARY" "$ARM64_BINARY" -output ./artifacts/osquery-macos-universal
          
          # Verify universal binary
          echo "Universal binary info:"
          lipo -info ./artifacts/osquery-macos-universal
          file ./artifacts/osquery-macos-universal
          
      - name: Sign MacOS package
        uses: ./.github/steps/sign-macos-package
        with:
          apple_certificate_p12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          apple_certificate_password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          apple_developer_id: ${{ secrets.APPLE_DEVELOPER_ID }}
          apple_id_username: ${{ secrets.APPLE_ID_USERNAME }}
          apple_id_password: ${{ secrets.APPLE_ID_PASSWORD }}
          apple_team_id: ${{ secrets.APPLE_TEAM_ID }}
          binary_name: osquery-macos-universal
          app_name: OSQuery


      - name: Upload Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: osquery-macos-universal
          path: artifacts/
          retention-days: 30
          compression-level: 9